{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/SammySchneider/dev/ProductPlan/src/RoadmapState.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./RoadmapContent.scss\";\nimport produce from \"immer\";\nimport * as Roadmap from \"./roadmap\";\nexport const RoadmapContext = /*#__PURE__*/React.createContext(null);\n/*\n * This component houses the roadmap state and exposes state-transition\n * functions to its children.\n */\n\nexport function RoadmapState({\n  initialState,\n  children\n}) {\n  _s();\n\n  const [state, setState] = React.useState(initialState || {\n    lanes: []\n  });\n  const addLane = React.useCallback(() => {\n    setState(produce(Roadmap.addLane()));\n  }, []);\n  const addBar = React.useCallback((bar, destination) => {\n    setState(produce(Roadmap.addBar(bar, destination)));\n  }, []);\n  const deleteBar = React.useCallback(bar => {\n    setState(produce(Roadmap.deleteBar(bar)));\n  }, []);\n  const moveBar = React.useCallback((bar, destination) => {\n    setState(produce(Roadmap.moveBar(bar, destination)));\n  }, []);\n  const roadmapContext = {\n    state,\n    addBar,\n    deleteBar,\n    moveBar,\n    addLane\n  };\n  return /*#__PURE__*/_jsxDEV(RoadmapContext.Provider, {\n    value: roadmapContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RoadmapState, \"luto+yn/0gSzp3rwJ2QxTPFpoV8=\");\n\n_c = RoadmapState;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoadmapState\");","map":{"version":3,"sources":["/Users/SammySchneider/dev/ProductPlan/src/RoadmapState.js"],"names":["React","produce","Roadmap","RoadmapContext","createContext","RoadmapState","initialState","children","state","setState","useState","lanes","addLane","useCallback","addBar","bar","destination","deleteBar","moveBar","roadmapContext"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAEA,OAAO,MAAMC,cAAc,gBAAGH,KAAK,CAACI,aAAN,CAAoB,IAApB,CAAvB;AAEP;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAtB,EAAkD;AAAA;;AACvD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACU,QAAN,CAAeJ,YAAY,IAAI;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAA/B,CAA1B;AAEA,QAAMC,OAAO,GAAGZ,KAAK,CAACa,WAAN,CAAkB,MAAM;AACtCJ,IAAAA,QAAQ,CAACR,OAAO,CAACC,OAAO,CAACU,OAAR,EAAD,CAAR,CAAR;AACD,GAFe,EAEb,EAFa,CAAhB;AAIA,QAAME,MAAM,GAAGd,KAAK,CAACa,WAAN,CAAkB,CAACE,GAAD,EAAMC,WAAN,KAAsB;AACrDP,IAAAA,QAAQ,CAACR,OAAO,CAACC,OAAO,CAACY,MAAR,CAAeC,GAAf,EAAoBC,WAApB,CAAD,CAAR,CAAR;AACD,GAFc,EAEZ,EAFY,CAAf;AAIA,QAAMC,SAAS,GAAGjB,KAAK,CAACa,WAAN,CAAkBE,GAAG,IAAI;AACzCN,IAAAA,QAAQ,CAACR,OAAO,CAACC,OAAO,CAACe,SAAR,CAAkBF,GAAlB,CAAD,CAAR,CAAR;AACD,GAFiB,EAEf,EAFe,CAAlB;AAIA,QAAMG,OAAO,GAAGlB,KAAK,CAACa,WAAN,CAAkB,CAACE,GAAD,EAAMC,WAAN,KAAsB;AACtDP,IAAAA,QAAQ,CAACR,OAAO,CAACC,OAAO,CAACgB,OAAR,CAAgBH,GAAhB,EAAqBC,WAArB,CAAD,CAAR,CAAR;AACD,GAFe,EAEb,EAFa,CAAhB;AAIA,QAAMG,cAAc,GAAG;AAAEX,IAAAA,KAAF;AAASM,IAAAA,MAAT;AAAiBG,IAAAA,SAAjB;AAA4BC,IAAAA,OAA5B;AAAqCN,IAAAA;AAArC,GAAvB;AAEA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEO,cAAhC;AAAA,cACGZ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA1BeF,Y;;KAAAA,Y","sourcesContent":["import React from \"react\";\nimport \"./RoadmapContent.scss\";\nimport produce from \"immer\";\nimport * as Roadmap from \"./roadmap\";\n\nexport const RoadmapContext = React.createContext(null);\n\n/*\n * This component houses the roadmap state and exposes state-transition\n * functions to its children.\n */\nexport function RoadmapState({ initialState, children }) {\n  const [state, setState] = React.useState(initialState || { lanes: [] });\n\n  const addLane = React.useCallback(() => {\n    setState(produce(Roadmap.addLane()));\n  }, []);\n\n  const addBar = React.useCallback((bar, destination) => {\n    setState(produce(Roadmap.addBar(bar, destination)));\n  }, []);\n\n  const deleteBar = React.useCallback(bar => {\n    setState(produce(Roadmap.deleteBar(bar)));\n  }, []);\n\n  const moveBar = React.useCallback((bar, destination) => {\n    setState(produce(Roadmap.moveBar(bar, destination)));\n  }, []);\n\n  const roadmapContext = { state, addBar, deleteBar, moveBar, addLane };\n\n  return (\n    <RoadmapContext.Provider value={roadmapContext}>\n      {children}\n    </RoadmapContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}