{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/SammySchneider/dev/noa/sammys-interview/productplan-candidate-hw/src/Bar.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { ViewportContext } from \"./Viewport\";\nimport { useDrag } from \"react-dnd\";\nimport { dateToFraction } from \"./dateHelpers\";\nimport \"./Bar.scss\";\nimport { Types } from \"./DndTypes\";\nexport function Bar({\n  bar\n}) {\n  _s();\n\n  const name = bar.name || \"Unnamed bar\";\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: Types.BAR,\n      bar\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const {\n    range,\n    width\n  } = React.useContext(ViewportContext);\n  const style = React.useMemo(() => {\n    const {\n      start,\n      end\n    } = bar;\n    const startFraction = dateToFraction(start, range);\n    const endFraction = dateToFraction(end, range);\n    const barOffset = width * startFraction;\n    const barWidth = (endFraction - startFraction) * width;\n    const style = {\n      left: barOffset,\n      width: barWidth\n    };\n\n    if (isDragging) {\n      style.opacity = 0.5;\n    }\n\n    return style;\n  }, [bar, range, width, isDragging]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar\",\n    ref: drag,\n    style: style,\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Bar, \"7WsW12X9hf+sNYPlVjJR3aX7X88=\", false, function () {\n  return [useDrag];\n});\n\n_c = Bar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bar\");","map":{"version":3,"sources":["/Users/SammySchneider/dev/noa/sammys-interview/productplan-candidate-hw/src/Bar.js"],"names":["React","ViewportContext","useDrag","dateToFraction","Types","Bar","bar","name","isDragging","drag","item","type","BAR","collect","monitor","range","width","useContext","style","useMemo","start","end","startFraction","endFraction","barOffset","barWidth","left","opacity"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAO,YAAP;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,OAAO,SAASC,GAAT,CAAa;AAAEC,EAAAA;AAAF,CAAb,EAAsB;AAAA;;AAC3B,QAAMC,IAAI,GAAGD,GAAG,CAACC,IAAJ,IAAY,aAAzB;AAEA,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyBP,OAAO,CAAC;AACrCQ,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAEP,KAAK,CAACQ,GAAd;AAAmBN,MAAAA;AAAnB,KAD+B;AAErCO,IAAAA,OAAO,EAAEC,OAAO,KAAK;AACnBN,MAAAA,UAAU,EAAEM,OAAO,CAACN,UAAR;AADO,KAAL;AAFqB,GAAD,CAAtC;AAOA,QAAM;AAAEO,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBhB,KAAK,CAACiB,UAAN,CAAiBhB,eAAjB,CAAzB;AACA,QAAMiB,KAAK,GAAGlB,KAAK,CAACmB,OAAN,CACZ,MAAM;AACJ,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiBf,GAAvB;AACA,UAAMgB,aAAa,GAAGnB,cAAc,CAACiB,KAAD,EAAQL,KAAR,CAApC;AACA,UAAMQ,WAAW,GAAGpB,cAAc,CAACkB,GAAD,EAAMN,KAAN,CAAlC;AACA,UAAMS,SAAS,GAAGR,KAAK,GAAGM,aAA1B;AACA,UAAMG,QAAQ,GAAG,CAACF,WAAW,GAAGD,aAAf,IAAgCN,KAAjD;AACA,UAAME,KAAK,GAAG;AAAEQ,MAAAA,IAAI,EAAEF,SAAR;AAAmBR,MAAAA,KAAK,EAAES;AAA1B,KAAd;;AACA,QAAIjB,UAAJ,EAAgB;AACdU,MAAAA,KAAK,CAACS,OAAN,GAAgB,GAAhB;AACD;;AACD,WAAOT,KAAP;AACD,GAZW,EAaZ,CAACZ,GAAD,EAAMS,KAAN,EAAaC,KAAb,EAAoBR,UAApB,CAbY,CAAd;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,GAAG,EAAEC,IAA1B;AAAgC,IAAA,KAAK,EAAES,KAAvC;AAAA,cACGX;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAhCeF,G;UAGiBH,O;;;KAHjBG,G","sourcesContent":["import React from \"react\";\nimport { ViewportContext } from \"./Viewport\";\nimport { useDrag } from \"react-dnd\";\nimport { dateToFraction } from \"./dateHelpers\";\nimport \"./Bar.scss\";\nimport { Types } from \"./DndTypes\";\n\nexport function Bar({ bar }) {\n  const name = bar.name || \"Unnamed bar\";\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: Types.BAR, bar },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const { range, width } = React.useContext(ViewportContext);\n  const style = React.useMemo(\n    () => {\n      const { start, end } = bar;\n      const startFraction = dateToFraction(start, range);\n      const endFraction = dateToFraction(end, range);\n      const barOffset = width * startFraction;\n      const barWidth = (endFraction - startFraction) * width;\n      const style = { left: barOffset, width: barWidth };\n      if (isDragging) {\n        style.opacity = 0.5;\n      }\n      return style;\n    },\n    [bar, range, width, isDragging]\n  );\n\n  return (\n    <div className=\"bar\" ref={drag} style={style}>\n      {name}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}