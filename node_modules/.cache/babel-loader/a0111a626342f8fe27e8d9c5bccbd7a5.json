{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/SammySchneider/dev/noa/sammys-interview/productplan-candidate-hw/src/Lane.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown, faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDrop } from \"react-dnd\";\nimport { RoadmapContext } from \"./RoadmapState\";\nimport { ViewportContext } from \"./Viewport\";\nimport { Bar } from \"./Bar\";\nimport \"./Lane.scss\";\nimport { Types } from \"./DndTypes\";\nimport classNames from \"classnames\";\nimport { millisToDate } from \"./dateHelpers\";\nexport function Lane({\n  lane\n}) {\n  _s();\n\n  const [collapsed, setCollapsed] = React.useState(false);\n  const name = lane.name || \"Unnamed lane\";\n  const {\n    range,\n    pixelInMillis\n  } = React.useContext(ViewportContext);\n  const caret = React.useMemo(() => collapsed ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n    icon: faCaretRight\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n    icon: faCaretDown\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this), [collapsed]);\n  const laneContentStyle = React.useMemo(() => {\n    const oneMonth = 2.628e9;\n    const stripWidth = oneMonth / pixelInMillis;\n    const stripeColor = \"#e0e4e7\";\n    const {\n      start\n    } = range;\n    const priorMonth = new Date(start.getFullYear(), start.getMonth());\n    const offset = start.getTime() - priorMonth.getTime();\n    const offsetInPixels = offset / pixelInMillis;\n    return {\n      background: `repeating-linear-gradient(90deg, transparent, transparent ${stripWidth - 1}px, ${stripeColor} 1px, ${stripeColor} ${stripWidth}px)`,\n      backgroundPosition: `-${offsetInPixels}px 0px`\n    };\n  }, [range, pixelInMillis]);\n  const laneContent = React.useMemo(() => {\n    if (lane.rows.length === 0) {\n      return /*#__PURE__*/_jsxDEV(BarDropzone, {\n        laneId: lane.id,\n        index: 0,\n        newRow: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: lane.rows.map((row, i) => /*#__PURE__*/_jsxDEV(LaneRow, {\n        row: row,\n        laneId: lane.id,\n        index: i\n      }, row.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this))\n    }, void 0, false);\n  }, [lane]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lane-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"lane-toggle-caret\",\n        onClick: () => {\n          setCollapsed(c => !c);\n        },\n        children: caret\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lane-content\",\n      style: laneContentStyle,\n      hidden: collapsed,\n      children: laneContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Lane, \"Ld9VpwOdvgbA1A8L2goAyqCxbds=\");\n\n_c = Lane;\nexport function LaneRow({\n  row,\n  index,\n  laneId\n}) {\n  _s2();\n\n  const {\n    state\n  } = React.useContext(RoadmapContext);\n  const centerRef = React.useRef();\n  const [lastY, setLastY] = React.useState(null);\n  const [{\n    isOver,\n    item\n  }, drop] = useDrop({\n    accept: Types.BAR,\n    hover: (item, monitor) => {\n      const {\n        y\n      } = monitor.getClientOffset();\n      setLastY(y);\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      item: monitor.getItem()\n    })\n  });\n  const [showPrevRow, showNextRow] = React.useMemo(() => {\n    if (!centerRef.current || lastY === null || !isOver) {\n      return [false, false];\n    }\n\n    let thisRowSize, prevRowSize, nextRowSize;\n\n    if (item && item.bar) {\n      const lane = state.lanes.find(lane => lane.id === laneId);\n      thisRowSize = rowSize(lane.rows[index], item.bar.id);\n      prevRowSize = index > 0 && rowSize(lane.rows[index - 1], item.bar.id);\n      nextRowSize = index < lane.rows.length - 1 && rowSize(lane.rows[index + 1], item.bar.id);\n    }\n\n    const {\n      top,\n      bottom\n    } = centerRef.current.getBoundingClientRect();\n    const proximity = 18;\n    const showPrevRow = thisRowSize !== 0 && prevRowSize !== 0 && lastY < top + proximity;\n    const showNextRow = thisRowSize !== 0 && nextRowSize !== 0 && lastY > bottom - proximity;\n    return [showPrevRow, showNextRow];\n  }, [isOver, lastY, item, index, laneId, state]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lane-row\",\n    ref: drop,\n    children: [/*#__PURE__*/_jsxDEV(BarDropzone, {\n      index: index,\n      laneId: laneId,\n      newRow: true,\n      expanded: showPrevRow\n    }, `above-${laneId}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: centerRef,\n      children: /*#__PURE__*/_jsxDEV(BarDropzone, {\n        index: index,\n        laneId: laneId,\n        children: row.bars.map(bar => /*#__PURE__*/_jsxDEV(Bar, {\n          bar: bar\n        }, bar.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 32\n        }, this))\n      }, `at-${laneId}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarDropzone, {\n      index: index + 1,\n      laneId: laneId,\n      newRow: true,\n      expanded: showNextRow\n    }, `below-${laneId}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(LaneRow, \"kHR2tDrMvn8jxDYdZdTQiWqbUUo=\", false, function () {\n  return [useDrop];\n});\n\n_c2 = LaneRow;\nexport function BarDropzone({\n  index,\n  laneId,\n  children,\n  newRow = false,\n  expanded = true\n}) {\n  _s3();\n\n  const {\n    moveBar,\n    addBar\n  } = React.useContext(RoadmapContext);\n  const {\n    pixelToMillis\n  } = React.useContext(ViewportContext);\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: Types.BAR,\n    drop: (item, monitor) => {\n      const {\n        x\n      } = monitor.getSourceClientOffset();\n      const dropMillis = pixelToMillis(x);\n      const start = millisToDate(dropMillis);\n      const destination = {\n        laneId,\n        index,\n        start,\n        newRow\n      };\n      const {\n        bar\n      } = item;\n\n      if (bar) {\n        moveBar(bar, destination);\n      } else {\n        addBar(bar, destination);\n      }\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames(\"bar-dropzone\", {\n      isOver,\n      newRow,\n      expanded\n    }),\n    ref: drop,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(BarDropzone, \"R9R9MrGtqD8CQPfFNLgkEscNnJc=\", false, function () {\n  return [useDrop];\n});\n\n_c3 = BarDropzone;\n\nfunction rowSize(row, draggedBarId) {\n  return row.bars.filter(b => b.id !== draggedBarId).length;\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Lane\");\n$RefreshReg$(_c2, \"LaneRow\");\n$RefreshReg$(_c3, \"BarDropzone\");","map":{"version":3,"sources":["/Users/SammySchneider/dev/noa/sammys-interview/productplan-candidate-hw/src/Lane.js"],"names":["React","FontAwesomeIcon","faCaretDown","faCaretRight","useDrop","RoadmapContext","ViewportContext","Bar","Types","classNames","millisToDate","Lane","lane","collapsed","setCollapsed","useState","name","range","pixelInMillis","useContext","caret","useMemo","laneContentStyle","oneMonth","stripWidth","stripeColor","start","priorMonth","Date","getFullYear","getMonth","offset","getTime","offsetInPixels","background","backgroundPosition","laneContent","rows","length","id","map","row","i","c","LaneRow","index","laneId","state","centerRef","useRef","lastY","setLastY","isOver","item","drop","accept","BAR","hover","monitor","y","getClientOffset","collect","getItem","showPrevRow","showNextRow","current","thisRowSize","prevRowSize","nextRowSize","bar","lanes","find","rowSize","top","bottom","getBoundingClientRect","proximity","bars","BarDropzone","children","newRow","expanded","moveBar","addBar","pixelToMillis","x","getSourceClientOffset","dropMillis","destination","draggedBarId","filter","b"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown, faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDrop } from \"react-dnd\";\nimport { RoadmapContext } from \"./RoadmapState\";\nimport { ViewportContext } from \"./Viewport\";\nimport { Bar } from \"./Bar\";\nimport \"./Lane.scss\";\nimport { Types } from \"./DndTypes\";\nimport classNames from \"classnames\";\nimport { millisToDate } from \"./dateHelpers\";\n\nexport function Lane({ lane }) {\n  const [collapsed, setCollapsed] = React.useState(false);\n  const name = lane.name || \"Unnamed lane\";\n  const { range, pixelInMillis } = React.useContext(ViewportContext);\n\n  const caret = React.useMemo(\n    () =>\n      collapsed ? (\n        <FontAwesomeIcon icon={faCaretRight} />\n      ) : (\n        <FontAwesomeIcon icon={faCaretDown} />\n      ),\n    [collapsed]\n  );\n\n  const laneContentStyle = React.useMemo(\n    () => {\n      const oneMonth = 2.628e9;\n      const stripWidth = oneMonth / pixelInMillis;\n      const stripeColor = \"#e0e4e7\";\n      const { start } = range;\n      const priorMonth = new Date(start.getFullYear(), start.getMonth());\n      const offset = start.getTime() - priorMonth.getTime();\n      const offsetInPixels = offset / pixelInMillis;\n      return {\n        background: `repeating-linear-gradient(90deg, transparent, transparent ${stripWidth -\n          1}px, ${stripeColor} 1px, ${stripeColor} ${stripWidth}px)`,\n        backgroundPosition: `-${offsetInPixels}px 0px`\n      };\n    },\n    [range, pixelInMillis]\n  );\n\n  const laneContent = React.useMemo(\n    () => {\n      if (lane.rows.length === 0) {\n        return <BarDropzone laneId={lane.id} index={0} newRow={true} />;\n      }\n\n      return (\n        <>\n          {lane.rows.map((row, i) => (\n            <LaneRow key={row.id} row={row} laneId={lane.id} index={i} />\n          ))}\n        </>\n      );\n    },\n    [lane]\n  );\n\n  return (\n    <div className=\"lane\">\n      <div className=\"lane-header\">\n        <span\n          className=\"lane-toggle-caret\"\n          onClick={() => {\n            setCollapsed(c => !c);\n          }}\n        >\n          {caret}\n        </span>\n        {name}\n      </div>\n      <div className=\"lane-content\" style={laneContentStyle} hidden={collapsed}>\n        {laneContent}\n      </div>\n    </div>\n  );\n}\n\nexport function LaneRow({ row, index, laneId }) {\n  const { state } = React.useContext(RoadmapContext);\n  const centerRef = React.useRef();\n  const [lastY, setLastY] = React.useState(null);\n  const [{ isOver, item }, drop] = useDrop({\n    accept: Types.BAR,\n    hover: (item, monitor) => {\n      const { y } = monitor.getClientOffset();\n      setLastY(y);\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      item: monitor.getItem()\n    })\n  });\n\n  const [showPrevRow, showNextRow] = React.useMemo(\n    () => {\n      if (!centerRef.current || lastY === null || !isOver) {\n        return [false, false];\n      }\n\n      let thisRowSize, prevRowSize, nextRowSize;\n      if (item && item.bar) {\n        const lane = state.lanes.find(lane => lane.id === laneId);\n        thisRowSize = rowSize(lane.rows[index], item.bar.id);\n        prevRowSize = index > 0 && rowSize(lane.rows[index - 1], item.bar.id);\n        nextRowSize =\n          index < lane.rows.length - 1 &&\n          rowSize(lane.rows[index + 1], item.bar.id);\n      }\n\n      const { top, bottom } = centerRef.current.getBoundingClientRect();\n      const proximity = 18;\n      const showPrevRow =\n        thisRowSize !== 0 && prevRowSize !== 0 && lastY < top + proximity;\n      const showNextRow =\n        thisRowSize !== 0 && nextRowSize !== 0 && lastY > bottom - proximity;\n      return [showPrevRow, showNextRow];\n    },\n    [isOver, lastY, item, index, laneId, state]\n  );\n\n  return (\n    <div className=\"lane-row\" ref={drop}>\n      <BarDropzone\n        key={`above-${laneId}`}\n        index={index}\n        laneId={laneId}\n        newRow={true}\n        expanded={showPrevRow}\n      />\n      <div ref={centerRef}>\n        <BarDropzone key={`at-${laneId}`} index={index} laneId={laneId}>\n          {row.bars.map(bar => <Bar key={bar.id} bar={bar} />)}\n        </BarDropzone>\n      </div>\n      <BarDropzone\n        key={`below-${laneId}`}\n        index={index + 1}\n        laneId={laneId}\n        newRow={true}\n        expanded={showNextRow}\n      />\n    </div>\n  );\n}\n\nexport function BarDropzone({\n  index,\n  laneId,\n  children,\n  newRow = false,\n  expanded = true\n}) {\n  const { moveBar, addBar } = React.useContext(RoadmapContext);\n  const { pixelToMillis } = React.useContext(ViewportContext);\n\n  const [{ isOver }, drop] = useDrop({\n    accept: Types.BAR,\n    drop: (item, monitor) => {\n      const { x } = monitor.getSourceClientOffset();\n      const dropMillis = pixelToMillis(x);\n      const start = millisToDate(dropMillis);\n      const destination = { laneId, index, start, newRow };\n      const { bar } = item;\n      if (bar) {\n        moveBar(bar, destination);\n      } else {\n        addBar(bar, destination);\n      }\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver()\n    })\n  });\n\n  return (\n    <div\n      className={classNames(\"bar-dropzone\", {\n        isOver,\n        newRow,\n        expanded\n      })}\n      ref={drop}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction rowSize(row, draggedBarId) {\n  return row.bars.filter(b => b.id !== draggedBarId).length;\n}\n"]},"metadata":{},"sourceType":"module"}