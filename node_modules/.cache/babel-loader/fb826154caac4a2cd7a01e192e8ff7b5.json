{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/SammySchneider/dev/noa/sammys-interview/productplan-candidate-hw/src/Viewport.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useResizeObserver from \"use-resize-observer\";\nimport { defaultRange } from \"./dateHelpers\";\nexport const ViewportContext = /*#__PURE__*/React.createContext(null);\n/*\n * A viewport represents a range of pixels that correspond to a range of dates.\n * Inside a viewport, an X coordinate can be converted to a moment in time and\n * vice-versa.\n */\n\nexport function Viewport({\n  children\n}) {\n  _s();\n\n  const [viewportRef, width] = useResizeObserver();\n  const [range, setRange] = React.useState(defaultRange());\n  const pixelInMillis = React.useMemo(() => {\n    const rangeMillis = range.end.getTime() - range.start.getTime();\n    return rangeMillis / width;\n  }, [range, width]);\n  const pixelToMillis = React.useCallback(x => {\n    return range.start.getTime() + x * pixelInMillis;\n  }, [range, pixelInMillis]);\n  const viewport = {\n    range,\n    setRange,\n    width,\n    pixelInMillis,\n    pixelToMillis\n  };\n  return /*#__PURE__*/_jsxDEV(ViewportContext.Provider, {\n    value: viewport,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewport\",\n      ref: viewportRef,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Viewport, \"TvjH7O+nmwZIxKomjLur0HUZWF4=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = Viewport;\n\nvar _c;\n\n$RefreshReg$(_c, \"Viewport\");","map":{"version":3,"sources":["/Users/SammySchneider/dev/noa/sammys-interview/productplan-candidate-hw/src/Viewport.js"],"names":["React","useResizeObserver","defaultRange","ViewportContext","createContext","Viewport","children","viewportRef","width","range","setRange","useState","pixelInMillis","useMemo","rangeMillis","end","getTime","start","pixelToMillis","useCallback","x","viewport"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAO,MAAMC,eAAe,gBAAGH,KAAK,CAACI,aAAN,CAAoB,IAApB,CAAxB;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAAA;;AACrC,QAAM,CAACC,WAAD,EAAcC,KAAd,IAAuBP,iBAAiB,EAA9C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAeT,YAAY,EAA3B,CAA1B;AAEA,QAAMU,aAAa,GAAGZ,KAAK,CAACa,OAAN,CACpB,MAAM;AACJ,UAAMC,WAAW,GAAGL,KAAK,CAACM,GAAN,CAAUC,OAAV,KAAsBP,KAAK,CAACQ,KAAN,CAAYD,OAAZ,EAA1C;AACA,WAAOF,WAAW,GAAGN,KAArB;AACD,GAJmB,EAKpB,CAACC,KAAD,EAAQD,KAAR,CALoB,CAAtB;AAQA,QAAMU,aAAa,GAAGlB,KAAK,CAACmB,WAAN,CACpBC,CAAC,IAAI;AACH,WAAOX,KAAK,CAACQ,KAAN,CAAYD,OAAZ,KAAwBI,CAAC,GAAGR,aAAnC;AACD,GAHmB,EAIpB,CAACH,KAAD,EAAQG,aAAR,CAJoB,CAAtB;AAOA,QAAMS,QAAQ,GAAG;AAAEZ,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBF,IAAAA,KAAnB;AAA0BI,IAAAA,aAA1B;AAAyCM,IAAAA;AAAzC,GAAjB;AAEA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEG,QAAjC;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAEd,WAA/B;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA5BeD,Q;UACeJ,iB;;;KADfI,Q","sourcesContent":["import React from \"react\";\nimport useResizeObserver from \"use-resize-observer\";\nimport { defaultRange } from \"./dateHelpers\";\n\nexport const ViewportContext = React.createContext(null);\n\n/*\n * A viewport represents a range of pixels that correspond to a range of dates.\n * Inside a viewport, an X coordinate can be converted to a moment in time and\n * vice-versa.\n */\nexport function Viewport({ children }) {\n  const [viewportRef, width] = useResizeObserver();\n  const [range, setRange] = React.useState(defaultRange());\n\n  const pixelInMillis = React.useMemo(\n    () => {\n      const rangeMillis = range.end.getTime() - range.start.getTime();\n      return rangeMillis / width;\n    },\n    [range, width]\n  );\n\n  const pixelToMillis = React.useCallback(\n    x => {\n      return range.start.getTime() + x * pixelInMillis;\n    },\n    [range, pixelInMillis]\n  );\n\n  const viewport = { range, setRange, width, pixelInMillis, pixelToMillis };\n\n  return (\n    <ViewportContext.Provider value={viewport}>\n      <div className=\"viewport\" ref={viewportRef}>\n        {children}\n      </div>\n    </ViewportContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}