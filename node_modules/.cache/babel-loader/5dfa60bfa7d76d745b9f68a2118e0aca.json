{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/SammySchneider/dev/ProductPlan/src/Axis.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { ViewportContext } from \"./Viewport\";\nimport { axisMonths, dateToFraction, millisToDate } from \"./dateHelpers\";\nimport { useGesture } from \"react-use-gesture\";\nimport \"./Axis.scss\";\nexport function Axis() {\n  _s();\n\n  const {\n    range,\n    setRange,\n    pixelInMillis\n  } = React.useContext(ViewportContext);\n  const labelledMonths = React.useMemo(() => [...axisMonths(range)], [range]);\n  const handlePinch = React.useCallback(({\n    vdva: [dd, da],\n    origin: [x]\n  }) => {\n    const delta = 18 * dd * Math.cos(da);\n    const rangeDelta = delta * pixelInMillis;\n    const focusOffset = x * pixelInMillis;\n    setRange(r => {\n      const startTime = r.start.getTime();\n      const endTime = r.end.getTime();\n      const rangeLength = endTime - startTime;\n      const bias = focusOffset / rangeLength;\n      const start = millisToDate(startTime + bias * rangeDelta);\n      const end = millisToDate(endTime - (1 - bias) * rangeDelta);\n      return {\n        start,\n        end\n      };\n    });\n  }, [pixelInMillis, setRange]);\n  const handleDrag = React.useCallback(({\n    vxvy: [vx]\n  }) => {\n    const rangeDelta = 18 * vx * pixelInMillis;\n    setRange(r => {\n      const start = millisToDate(r.start.getTime() - rangeDelta);\n      const end = millisToDate(r.end.getTime() - rangeDelta);\n      return {\n        start,\n        end\n      };\n    });\n  }, [pixelInMillis, setRange]);\n  const axisRef = React.useRef();\n  const bindGestures = useGesture({\n    onDrag: handleDrag,\n    onPinch: handlePinch\n  }, {\n    domTarget: axisRef,\n    event: {\n      passive: false\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"axis\",\n    ref: axisRef,\n    ...bindGestures(),\n    children: labelledMonths.map(({\n      label,\n      month\n    }) => /*#__PURE__*/_jsxDEV(AxisMarker, {\n      date: month,\n      label: label\n    }, month.getTime(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Axis, \"UuHISzadzMjIQj7wdKflQNhRKTM=\", false, function () {\n  return [useGesture];\n});\n\n_c = Axis;\n\nfunction AxisMarker({\n  date,\n  label\n}) {\n  _s2();\n\n  const {\n    range,\n    width\n  } = React.useContext(ViewportContext);\n  const style = React.useMemo(() => {\n    const fraction = dateToFraction(date, range);\n    const left = width * fraction;\n    return {\n      left\n    };\n  }, [date, range, width]);\n\n  const labelDiv = label && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"label\",\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 29\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"axis-month\",\n    style: style,\n    children: [labelDiv, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dot\",\n      children: \"\\u2022\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AxisMarker, \"yqms1bReorCR7KupYYvLk3c7iIk=\");\n\n_c2 = AxisMarker;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Axis\");\n$RefreshReg$(_c2, \"AxisMarker\");","map":{"version":3,"sources":["/Users/SammySchneider/dev/ProductPlan/src/Axis.js"],"names":["React","ViewportContext","axisMonths","dateToFraction","millisToDate","useGesture","Axis","range","setRange","pixelInMillis","useContext","labelledMonths","useMemo","handlePinch","useCallback","vdva","dd","da","origin","x","delta","Math","cos","rangeDelta","focusOffset","r","startTime","start","getTime","endTime","end","rangeLength","bias","handleDrag","vxvy","vx","axisRef","useRef","bindGestures","onDrag","onPinch","domTarget","event","passive","map","label","month","AxisMarker","date","width","style","fraction","left","labelDiv"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ViewportContext } from \"./Viewport\";\nimport { axisMonths, dateToFraction, millisToDate } from \"./dateHelpers\";\nimport { useGesture } from \"react-use-gesture\";\nimport \"./Axis.scss\";\n\nexport function Axis() {\n  const { range, setRange, pixelInMillis } = React.useContext(ViewportContext);\n\n  const labelledMonths = React.useMemo(() => [...axisMonths(range)], [range]);\n  const handlePinch = React.useCallback(\n    ({ vdva: [dd, da], origin: [x] }) => {\n      const delta = 18 * dd * Math.cos(da);\n      const rangeDelta = delta * pixelInMillis;\n      const focusOffset = x * pixelInMillis;\n      setRange(r => {\n        const startTime = r.start.getTime();\n        const endTime = r.end.getTime();\n        const rangeLength = endTime - startTime;\n        const bias = focusOffset / rangeLength;\n        const start = millisToDate(startTime + bias * rangeDelta);\n        const end = millisToDate(endTime - (1 - bias) * rangeDelta);\n        return { start, end };\n      });\n    },\n    [pixelInMillis, setRange]\n  );\n\n  const handleDrag = React.useCallback(\n    ({ vxvy: [vx] }) => {\n      const rangeDelta = 18 * vx * pixelInMillis;\n      setRange(r => {\n        const start = millisToDate(r.start.getTime() - rangeDelta);\n        const end = millisToDate(r.end.getTime() - rangeDelta);\n        return { start, end };\n      });\n    },\n    [pixelInMillis, setRange]\n  );\n\n  const axisRef = React.useRef();\n  const bindGestures = useGesture(\n    {\n      onDrag: handleDrag,\n      onPinch: handlePinch\n    },\n    {\n      domTarget: axisRef,\n      event: { passive: false }\n    }\n  );\n\n  return (\n    <div className=\"axis\" ref={axisRef} {...bindGestures()}>\n      {labelledMonths.map(({ label, month }) => (\n        <AxisMarker key={month.getTime()} date={month} label={label} />\n      ))}\n    </div>\n  );\n}\n\nfunction AxisMarker({ date, label }) {\n  const { range, width } = React.useContext(ViewportContext);\n  const style = React.useMemo(\n    () => {\n      const fraction = dateToFraction(date, range);\n      const left = width * fraction;\n      return { left };\n    },\n    [date, range, width]\n  );\n\n  const labelDiv = label && <div className=\"label\">{label}</div>;\n  return (\n    <div className=\"axis-month\" style={style}>\n      {labelDiv}\n      <div className=\"dot\">â€¢</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}