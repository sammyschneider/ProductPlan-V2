{"ast":null,"code":"export const oneWeekMillis = 6.048e8;\nexport function defaultRange() {\n  const start = new Date();\n  const end = new Date();\n  end.setFullYear(start.getFullYear() + 1);\n  shiftDateMillis(start, -oneWeekMillis);\n  shiftDateMillis(end, oneWeekMillis);\n  return {\n    start,\n    end\n  };\n}\nexport function dateToFraction(date, range) {\n  const {\n    start,\n    end\n  } = range;\n  const total = end.getTime() - start.getTime();\n  return (date.getTime() - start.getTime()) / total;\n}\nexport function* axisMonths(range) {\n  let first = true;\n\n  for (let month of monthsToShow(range)) {\n    const label = axisMonthLabel(month, first);\n    yield {\n      month,\n      label\n    };\n    first = false;\n  }\n}\nexport function shiftDateMillis(date, millis) {\n  date.setTime(date.getTime() + millis);\n}\nexport function millisToDate(millis) {\n  const date = new Date();\n  date.setTime(millis);\n  return date;\n}\nexport function* monthsToShow(range) {\n  const {\n    start,\n    end\n  } = range;\n  let m = start.getMonth();\n  let y = start.getFullYear();\n  const endM = end.getMonth();\n  const endY = end.getFullYear();\n\n  if (start.getDate() > 1) {\n    m++;\n  }\n\n  while (true) {\n    if (m === 12) {\n      m = 0;\n      y++;\n    }\n\n    if (y > endY || y === endY && m > endM) {\n      break;\n    }\n\n    yield new Date(y, m);\n    m++;\n  }\n}\nexport function axisMonthLabel(month, first) {\n  const y = month.getFullYear();\n  let q = null;\n  let showYear = first;\n  const m = month.getMonth();\n  const showQ = m % 3 === 0;\n\n  if (showQ) {\n    q = m / 3 + 1;\n\n    if (q === 1) {\n      showYear = true;\n    }\n  }\n\n  if (showQ && showYear) {\n    return `Q${q} ${y}`;\n  }\n\n  if (showQ) {\n    return `Q${q}`;\n  }\n\n  if (showYear) {\n    return `${y}`;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/SammySchneider/dev/noa/sammys-interview/productplan-candidate-hw/src/dateHelpers.js"],"names":["oneWeekMillis","defaultRange","start","Date","end","setFullYear","getFullYear","shiftDateMillis","dateToFraction","date","range","total","getTime","axisMonths","first","month","monthsToShow","label","axisMonthLabel","millis","setTime","millisToDate","m","getMonth","y","endM","endY","getDate","q","showYear","showQ"],"mappings":"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","sourcesContent":["export const oneWeekMillis = 6.048e8;\n\nexport function defaultRange() {\n  const start = new Date();\n  const end = new Date();\n  end.setFullYear(start.getFullYear() + 1);\n  shiftDateMillis(start, -oneWeekMillis);\n  shiftDateMillis(end, oneWeekMillis);\n  return { start, end };\n}\n\nexport function dateToFraction(date, range) {\n  const { start, end } = range;\n  const total = end.getTime() - start.getTime();\n  return (date.getTime() - start.getTime()) / total;\n}\n\nexport function* axisMonths(range) {\n  let first = true;\n  for (let month of monthsToShow(range)) {\n    const label = axisMonthLabel(month, first);\n    yield { month, label };\n    first = false;\n  }\n}\n\nexport function shiftDateMillis(date, millis) {\n  date.setTime(date.getTime() + millis);\n}\n\nexport function millisToDate(millis) {\n  const date = new Date();\n  date.setTime(millis);\n  return date;\n}\n\nexport function* monthsToShow(range) {\n  const { start, end } = range;\n  let m = start.getMonth();\n  let y = start.getFullYear();\n  const endM = end.getMonth();\n  const endY = end.getFullYear();\n  if (start.getDate() > 1) {\n    m++;\n  }\n  while (true) {\n    if (m === 12) {\n      m = 0;\n      y++;\n    }\n\n    if (y > endY || (y === endY && m > endM)) {\n      break;\n    }\n\n    yield new Date(y, m);\n    m++;\n  }\n}\n\nexport function axisMonthLabel(month, first) {\n  const y = month.getFullYear();\n  let q = null;\n  let showYear = first;\n  const m = month.getMonth();\n  const showQ = m % 3 === 0;\n\n  if (showQ) {\n    q = m / 3 + 1;\n    if (q === 1) {\n      showYear = true;\n    }\n  }\n\n  if (showQ && showYear) {\n    return `Q${q} ${y}`;\n  }\n\n  if (showQ) {\n    return `Q${q}`;\n  }\n\n  if (showYear) {\n    return `${y}`;\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}